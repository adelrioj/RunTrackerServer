package es.eina.tfg.model;

import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import es.eina.tfg.service.persistence.DeviceAndSensorPK;

import java.io.Serializable;

/**
 * The base model interface for the DeviceAndSensor service. Represents a row in the &quot;GL_DeviceAndSensor&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link es.eina.tfg.model.impl.DeviceAndSensorModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link es.eina.tfg.model.impl.DeviceAndSensorImpl}.
 * </p>
 *
 * @author adelrioj
 * @see DeviceAndSensor
 * @see es.eina.tfg.model.impl.DeviceAndSensorImpl
 * @see es.eina.tfg.model.impl.DeviceAndSensorModelImpl
 * @generated
 */
public interface DeviceAndSensorModel extends BaseModel<DeviceAndSensor> {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this interface directly. All methods that expect a device and sensor model instance should use the {@link DeviceAndSensor} interface instead.
     */

    /**
     * Returns the primary key of this device and sensor.
     *
     * @return the primary key of this device and sensor
     */
    public DeviceAndSensorPK getPrimaryKey();

    /**
     * Sets the primary key of this device and sensor.
     *
     * @param primaryKey the primary key of this device and sensor
     */
    public void setPrimaryKey(DeviceAndSensorPK primaryKey);

    /**
     * Returns the id device of this device and sensor.
     *
     * @return the id device of this device and sensor
     */
    public long getIdDevice();

    /**
     * Sets the id device of this device and sensor.
     *
     * @param idDevice the id device of this device and sensor
     */
    public void setIdDevice(long idDevice);

    /**
     * Returns the id sensor of this device and sensor.
     *
     * @return the id sensor of this device and sensor
     */
    public long getIdSensor();

    /**
     * Sets the id sensor of this device and sensor.
     *
     * @param idSensor the id sensor of this device and sensor
     */
    public void setIdSensor(long idSensor);

    /**
     * Returns the status of this device and sensor.
     *
     * @return the status of this device and sensor
     */
    public boolean getStatus();

    /**
     * Returns <code>true</code> if this device and sensor is status.
     *
     * @return <code>true</code> if this device and sensor is status; <code>false</code> otherwise
     */
    public boolean isStatus();

    /**
     * Sets whether this device and sensor is status.
     *
     * @param status the status of this device and sensor
     */
    public void setStatus(boolean status);

    @Override
    public boolean isNew();

    @Override
    public void setNew(boolean n);

    @Override
    public boolean isCachedModel();

    @Override
    public void setCachedModel(boolean cachedModel);

    @Override
    public boolean isEscapedModel();

    @Override
    public Serializable getPrimaryKeyObj();

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj);

    @Override
    public ExpandoBridge getExpandoBridge();

    @Override
    public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

    @Override
    public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext);

    @Override
    public Object clone();

    @Override
    public int compareTo(es.eina.tfg.model.DeviceAndSensor deviceAndSensor);

    @Override
    public int hashCode();

    @Override
    public CacheModel<es.eina.tfg.model.DeviceAndSensor> toCacheModel();

    @Override
    public es.eina.tfg.model.DeviceAndSensor toEscapedModel();

    @Override
    public es.eina.tfg.model.DeviceAndSensor toUnescapedModel();

    @Override
    public String toString();

    @Override
    public String toXmlString();
}
