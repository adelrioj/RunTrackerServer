package es.eina.tfg.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import es.eina.tfg.model.Race;
import es.eina.tfg.model.RaceModel;
import es.eina.tfg.model.RaceSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Race service. Represents a row in the &quot;GL_Race&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link es.eina.tfg.model.RaceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RaceImpl}.
 * </p>
 *
 * @author adelrioj
 * @see RaceImpl
 * @see es.eina.tfg.model.Race
 * @see es.eina.tfg.model.RaceModel
 * @generated
 */
@JSON(strict = true)
public class RaceModelImpl extends BaseModelImpl<Race> implements RaceModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a race model instance should use the {@link es.eina.tfg.model.Race} interface instead.
     */
    public static final String TABLE_NAME = "GL_Race";
    public static final Object[][] TABLE_COLUMNS = {
            { "raceId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "routeId", Types.BIGINT },
            { "type_", Types.VARCHAR },
            { "userHeight", Types.INTEGER },
            { "userWeight", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table GL_Race (raceId LONG not null primary key,userId LONG,routeId LONG,type_ VARCHAR(75) null,userHeight INTEGER,userWeight INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table GL_Race";
    public static final String ORDER_BY_JPQL = " ORDER BY race.userId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY GL_Race.userId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.es.eina.tfg.model.Race"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.es.eina.tfg.model.Race"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.es.eina.tfg.model.Race"),
            true);
    public static long USERID_COLUMN_BITMASK = 1L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.es.eina.tfg.model.Race"));
    private static ClassLoader _classLoader = Race.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Race.class };
    private long _raceId;
    private long _userId;
    private String _userUuid;
    private long _originalUserId;
    private boolean _setOriginalUserId;
    private long _routeId;
    private String _type;
    private int _userHeight;
    private int _userWeight;
    private long _columnBitmask;
    private Race _escapedModel;

    public RaceModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Race toModel(RaceSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Race model = new RaceImpl();

        model.setRaceId(soapModel.getRaceId());
        model.setUserId(soapModel.getUserId());
        model.setRouteId(soapModel.getRouteId());
        model.setType(soapModel.getType());
        model.setUserHeight(soapModel.getUserHeight());
        model.setUserWeight(soapModel.getUserWeight());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Race> toModels(RaceSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Race> models = new ArrayList<Race>(soapModels.length);

        for (RaceSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _raceId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setRaceId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _raceId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Race.class;
    }

    @Override
    public String getModelClassName() {
        return Race.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("raceId", getRaceId());
        attributes.put("userId", getUserId());
        attributes.put("routeId", getRouteId());
        attributes.put("type", getType());
        attributes.put("userHeight", getUserHeight());
        attributes.put("userWeight", getUserWeight());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long raceId = (Long) attributes.get("raceId");

        if (raceId != null) {
            setRaceId(raceId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Long routeId = (Long) attributes.get("routeId");

        if (routeId != null) {
            setRouteId(routeId);
        }

        String type = (String) attributes.get("type");

        if (type != null) {
            setType(type);
        }

        Integer userHeight = (Integer) attributes.get("userHeight");

        if (userHeight != null) {
            setUserHeight(userHeight);
        }

        Integer userWeight = (Integer) attributes.get("userWeight");

        if (userWeight != null) {
            setUserWeight(userWeight);
        }
    }

    @JSON
    @Override
    public long getRaceId() {
        return _raceId;
    }

    @Override
    public void setRaceId(long raceId) {
        _raceId = raceId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _columnBitmask = -1L;

        if (!_setOriginalUserId) {
            _setOriginalUserId = true;

            _originalUserId = _userId;
        }

        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    public long getOriginalUserId() {
        return _originalUserId;
    }

    @JSON
    @Override
    public long getRouteId() {
        return _routeId;
    }

    @Override
    public void setRouteId(long routeId) {
        _routeId = routeId;
    }

    @JSON
    @Override
    public String getType() {
        if (_type == null) {
            return StringPool.BLANK;
        } else {
            return _type;
        }
    }

    @Override
    public void setType(String type) {
        _type = type;
    }

    @JSON
    @Override
    public int getUserHeight() {
        return _userHeight;
    }

    @Override
    public void setUserHeight(int userHeight) {
        _userHeight = userHeight;
    }

    @JSON
    @Override
    public int getUserWeight() {
        return _userWeight;
    }

    @Override
    public void setUserWeight(int userWeight) {
        _userWeight = userWeight;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Race.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Race toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Race) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        RaceImpl raceImpl = new RaceImpl();

        raceImpl.setRaceId(getRaceId());
        raceImpl.setUserId(getUserId());
        raceImpl.setRouteId(getRouteId());
        raceImpl.setType(getType());
        raceImpl.setUserHeight(getUserHeight());
        raceImpl.setUserWeight(getUserWeight());

        raceImpl.resetOriginalValues();

        return raceImpl;
    }

    @Override
    public int compareTo(Race race) {
        int value = 0;

        if (getUserId() < race.getUserId()) {
            value = -1;
        } else if (getUserId() > race.getUserId()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Race)) {
            return false;
        }

        Race race = (Race) obj;

        long primaryKey = race.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        RaceModelImpl raceModelImpl = this;

        raceModelImpl._originalUserId = raceModelImpl._userId;

        raceModelImpl._setOriginalUserId = false;

        raceModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Race> toCacheModel() {
        RaceCacheModel raceCacheModel = new RaceCacheModel();

        raceCacheModel.raceId = getRaceId();

        raceCacheModel.userId = getUserId();

        raceCacheModel.routeId = getRouteId();

        raceCacheModel.type = getType();

        String type = raceCacheModel.type;

        if ((type != null) && (type.length() == 0)) {
            raceCacheModel.type = null;
        }

        raceCacheModel.userHeight = getUserHeight();

        raceCacheModel.userWeight = getUserWeight();

        return raceCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{raceId=");
        sb.append(getRaceId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", routeId=");
        sb.append(getRouteId());
        sb.append(", type=");
        sb.append(getType());
        sb.append(", userHeight=");
        sb.append(getUserHeight());
        sb.append(", userWeight=");
        sb.append(getUserWeight());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append("es.eina.tfg.model.Race");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>raceId</column-name><column-value><![CDATA[");
        sb.append(getRaceId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>routeId</column-name><column-value><![CDATA[");
        sb.append(getRouteId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>type</column-name><column-value><![CDATA[");
        sb.append(getType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userHeight</column-name><column-value><![CDATA[");
        sb.append(getUserHeight());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userWeight</column-name><column-value><![CDATA[");
        sb.append(getUserWeight());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
