package es.eina.tfg.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import es.eina.tfg.model.Event;
import es.eina.tfg.model.EventModel;
import es.eina.tfg.model.EventSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Event service. Represents a row in the &quot;GL_Event&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link es.eina.tfg.model.EventModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EventImpl}.
 * </p>
 *
 * @author adelrioj
 * @see EventImpl
 * @see es.eina.tfg.model.Event
 * @see es.eina.tfg.model.EventModel
 * @generated
 */
@JSON(strict = true)
public class EventModelImpl extends BaseModelImpl<Event> implements EventModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a event model instance should use the {@link es.eina.tfg.model.Event} interface instead.
     */
    public static final String TABLE_NAME = "GL_Event";
    public static final Object[][] TABLE_COLUMNS = {
            { "idEvent", Types.BIGINT },
            { "idRoute", Types.BIGINT },
            { "idAuthor", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "plannedStartingTime", Types.TIMESTAMP },
            { "plannedFinishTime", Types.TIMESTAMP },
            { "realStartingTime", Types.TIMESTAMP },
            { "realFinishTime", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table GL_Event (idEvent LONG not null primary key,idRoute LONG,idAuthor LONG,name VARCHAR(75) null,plannedStartingTime DATE null,plannedFinishTime DATE null,realStartingTime DATE null,realFinishTime DATE null)";
    public static final String TABLE_SQL_DROP = "drop table GL_Event";
    public static final String ORDER_BY_JPQL = " ORDER BY event.idEvent ASC";
    public static final String ORDER_BY_SQL = " ORDER BY GL_Event.idEvent ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.es.eina.tfg.model.Event"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.es.eina.tfg.model.Event"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.es.eina.tfg.model.Event"),
            true);
    public static long IDAUTHOR_COLUMN_BITMASK = 1L;
    public static long IDROUTE_COLUMN_BITMASK = 2L;
    public static long IDEVENT_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.es.eina.tfg.model.Event"));
    private static ClassLoader _classLoader = Event.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Event.class };
    private long _idEvent;
    private long _idRoute;
    private long _originalIdRoute;
    private boolean _setOriginalIdRoute;
    private long _idAuthor;
    private long _originalIdAuthor;
    private boolean _setOriginalIdAuthor;
    private String _name;
    private Date _plannedStartingTime;
    private Date _plannedFinishTime;
    private Date _realStartingTime;
    private Date _realFinishTime;
    private long _columnBitmask;
    private Event _escapedModel;

    public EventModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Event toModel(EventSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Event model = new EventImpl();

        model.setIdEvent(soapModel.getIdEvent());
        model.setIdRoute(soapModel.getIdRoute());
        model.setIdAuthor(soapModel.getIdAuthor());
        model.setName(soapModel.getName());
        model.setPlannedStartingTime(soapModel.getPlannedStartingTime());
        model.setPlannedFinishTime(soapModel.getPlannedFinishTime());
        model.setRealStartingTime(soapModel.getRealStartingTime());
        model.setRealFinishTime(soapModel.getRealFinishTime());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Event> toModels(EventSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Event> models = new ArrayList<Event>(soapModels.length);

        for (EventSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _idEvent;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setIdEvent(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _idEvent;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Event.class;
    }

    @Override
    public String getModelClassName() {
        return Event.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("idEvent", getIdEvent());
        attributes.put("idRoute", getIdRoute());
        attributes.put("idAuthor", getIdAuthor());
        attributes.put("name", getName());
        attributes.put("plannedStartingTime", getPlannedStartingTime());
        attributes.put("plannedFinishTime", getPlannedFinishTime());
        attributes.put("realStartingTime", getRealStartingTime());
        attributes.put("realFinishTime", getRealFinishTime());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long idEvent = (Long) attributes.get("idEvent");

        if (idEvent != null) {
            setIdEvent(idEvent);
        }

        Long idRoute = (Long) attributes.get("idRoute");

        if (idRoute != null) {
            setIdRoute(idRoute);
        }

        Long idAuthor = (Long) attributes.get("idAuthor");

        if (idAuthor != null) {
            setIdAuthor(idAuthor);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        Date plannedStartingTime = (Date) attributes.get("plannedStartingTime");

        if (plannedStartingTime != null) {
            setPlannedStartingTime(plannedStartingTime);
        }

        Date plannedFinishTime = (Date) attributes.get("plannedFinishTime");

        if (plannedFinishTime != null) {
            setPlannedFinishTime(plannedFinishTime);
        }

        Date realStartingTime = (Date) attributes.get("realStartingTime");

        if (realStartingTime != null) {
            setRealStartingTime(realStartingTime);
        }

        Date realFinishTime = (Date) attributes.get("realFinishTime");

        if (realFinishTime != null) {
            setRealFinishTime(realFinishTime);
        }
    }

    @JSON
    @Override
    public long getIdEvent() {
        return _idEvent;
    }

    @Override
    public void setIdEvent(long idEvent) {
        _idEvent = idEvent;
    }

    @JSON
    @Override
    public long getIdRoute() {
        return _idRoute;
    }

    @Override
    public void setIdRoute(long idRoute) {
        _columnBitmask |= IDROUTE_COLUMN_BITMASK;

        if (!_setOriginalIdRoute) {
            _setOriginalIdRoute = true;

            _originalIdRoute = _idRoute;
        }

        _idRoute = idRoute;
    }

    public long getOriginalIdRoute() {
        return _originalIdRoute;
    }

    @JSON
    @Override
    public long getIdAuthor() {
        return _idAuthor;
    }

    @Override
    public void setIdAuthor(long idAuthor) {
        _columnBitmask |= IDAUTHOR_COLUMN_BITMASK;

        if (!_setOriginalIdAuthor) {
            _setOriginalIdAuthor = true;

            _originalIdAuthor = _idAuthor;
        }

        _idAuthor = idAuthor;
    }

    public long getOriginalIdAuthor() {
        return _originalIdAuthor;
    }

    @JSON
    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @JSON
    @Override
    public Date getPlannedStartingTime() {
        return _plannedStartingTime;
    }

    @Override
    public void setPlannedStartingTime(Date plannedStartingTime) {
        _plannedStartingTime = plannedStartingTime;
    }

    @JSON
    @Override
    public Date getPlannedFinishTime() {
        return _plannedFinishTime;
    }

    @Override
    public void setPlannedFinishTime(Date plannedFinishTime) {
        _plannedFinishTime = plannedFinishTime;
    }

    @JSON
    @Override
    public Date getRealStartingTime() {
        return _realStartingTime;
    }

    @Override
    public void setRealStartingTime(Date realStartingTime) {
        _realStartingTime = realStartingTime;
    }

    @JSON
    @Override
    public Date getRealFinishTime() {
        return _realFinishTime;
    }

    @Override
    public void setRealFinishTime(Date realFinishTime) {
        _realFinishTime = realFinishTime;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Event.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Event toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Event) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        EventImpl eventImpl = new EventImpl();

        eventImpl.setIdEvent(getIdEvent());
        eventImpl.setIdRoute(getIdRoute());
        eventImpl.setIdAuthor(getIdAuthor());
        eventImpl.setName(getName());
        eventImpl.setPlannedStartingTime(getPlannedStartingTime());
        eventImpl.setPlannedFinishTime(getPlannedFinishTime());
        eventImpl.setRealStartingTime(getRealStartingTime());
        eventImpl.setRealFinishTime(getRealFinishTime());

        eventImpl.resetOriginalValues();

        return eventImpl;
    }

    @Override
    public int compareTo(Event event) {
        long primaryKey = event.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Event)) {
            return false;
        }

        Event event = (Event) obj;

        long primaryKey = event.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        EventModelImpl eventModelImpl = this;

        eventModelImpl._originalIdRoute = eventModelImpl._idRoute;

        eventModelImpl._setOriginalIdRoute = false;

        eventModelImpl._originalIdAuthor = eventModelImpl._idAuthor;

        eventModelImpl._setOriginalIdAuthor = false;

        eventModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Event> toCacheModel() {
        EventCacheModel eventCacheModel = new EventCacheModel();

        eventCacheModel.idEvent = getIdEvent();

        eventCacheModel.idRoute = getIdRoute();

        eventCacheModel.idAuthor = getIdAuthor();

        eventCacheModel.name = getName();

        String name = eventCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            eventCacheModel.name = null;
        }

        Date plannedStartingTime = getPlannedStartingTime();

        if (plannedStartingTime != null) {
            eventCacheModel.plannedStartingTime = plannedStartingTime.getTime();
        } else {
            eventCacheModel.plannedStartingTime = Long.MIN_VALUE;
        }

        Date plannedFinishTime = getPlannedFinishTime();

        if (plannedFinishTime != null) {
            eventCacheModel.plannedFinishTime = plannedFinishTime.getTime();
        } else {
            eventCacheModel.plannedFinishTime = Long.MIN_VALUE;
        }

        Date realStartingTime = getRealStartingTime();

        if (realStartingTime != null) {
            eventCacheModel.realStartingTime = realStartingTime.getTime();
        } else {
            eventCacheModel.realStartingTime = Long.MIN_VALUE;
        }

        Date realFinishTime = getRealFinishTime();

        if (realFinishTime != null) {
            eventCacheModel.realFinishTime = realFinishTime.getTime();
        } else {
            eventCacheModel.realFinishTime = Long.MIN_VALUE;
        }

        return eventCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(17);

        sb.append("{idEvent=");
        sb.append(getIdEvent());
        sb.append(", idRoute=");
        sb.append(getIdRoute());
        sb.append(", idAuthor=");
        sb.append(getIdAuthor());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", plannedStartingTime=");
        sb.append(getPlannedStartingTime());
        sb.append(", plannedFinishTime=");
        sb.append(getPlannedFinishTime());
        sb.append(", realStartingTime=");
        sb.append(getRealStartingTime());
        sb.append(", realFinishTime=");
        sb.append(getRealFinishTime());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(28);

        sb.append("<model><model-name>");
        sb.append("es.eina.tfg.model.Event");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>idEvent</column-name><column-value><![CDATA[");
        sb.append(getIdEvent());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>idRoute</column-name><column-value><![CDATA[");
        sb.append(getIdRoute());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>idAuthor</column-name><column-value><![CDATA[");
        sb.append(getIdAuthor());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>plannedStartingTime</column-name><column-value><![CDATA[");
        sb.append(getPlannedStartingTime());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>plannedFinishTime</column-name><column-value><![CDATA[");
        sb.append(getPlannedFinishTime());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>realStartingTime</column-name><column-value><![CDATA[");
        sb.append(getRealStartingTime());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>realFinishTime</column-name><column-value><![CDATA[");
        sb.append(getRealFinishTime());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
