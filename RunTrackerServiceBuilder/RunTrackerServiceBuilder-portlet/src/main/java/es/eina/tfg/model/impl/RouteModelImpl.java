package es.eina.tfg.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import es.eina.tfg.model.Route;
import es.eina.tfg.model.RouteModel;
import es.eina.tfg.model.RouteSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Route service. Represents a row in the &quot;GL_Route&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link es.eina.tfg.model.RouteModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RouteImpl}.
 * </p>
 *
 * @author adelrioj
 * @see RouteImpl
 * @see es.eina.tfg.model.Route
 * @see es.eina.tfg.model.RouteModel
 * @generated
 */
@JSON(strict = true)
public class RouteModelImpl extends BaseModelImpl<Route> implements RouteModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a route model instance should use the {@link es.eina.tfg.model.Route} interface instead.
     */
    public static final String TABLE_NAME = "GL_Route";
    public static final Object[][] TABLE_COLUMNS = {
            { "idRoute", Types.BIGINT },
            { "idAuthor", Types.BIGINT },
            { "type_", Types.VARCHAR },
            { "name", Types.VARCHAR },
            { "description", Types.VARCHAR },
            { "isPublic", Types.BOOLEAN },
            { "creationTime", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table GL_Route (idRoute LONG not null primary key,idAuthor LONG,type_ VARCHAR(75) null,name VARCHAR(75) null,description VARCHAR(75) null,isPublic BOOLEAN,creationTime DATE null)";
    public static final String TABLE_SQL_DROP = "drop table GL_Route";
    public static final String ORDER_BY_JPQL = " ORDER BY route.creationTime ASC";
    public static final String ORDER_BY_SQL = " ORDER BY GL_Route.creationTime ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.es.eina.tfg.model.Route"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.es.eina.tfg.model.Route"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.es.eina.tfg.model.Route"),
            true);
    public static long IDAUTHOR_COLUMN_BITMASK = 1L;
    public static long ISPUBLIC_COLUMN_BITMASK = 2L;
    public static long CREATIONTIME_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.es.eina.tfg.model.Route"));
    private static ClassLoader _classLoader = Route.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Route.class };
    private long _idRoute;
    private long _idAuthor;
    private long _originalIdAuthor;
    private boolean _setOriginalIdAuthor;
    private String _type;
    private String _name;
    private String _description;
    private boolean _isPublic;
    private boolean _originalIsPublic;
    private boolean _setOriginalIsPublic;
    private Date _creationTime;
    private long _columnBitmask;
    private Route _escapedModel;

    public RouteModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Route toModel(RouteSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Route model = new RouteImpl();

        model.setIdRoute(soapModel.getIdRoute());
        model.setIdAuthor(soapModel.getIdAuthor());
        model.setType(soapModel.getType());
        model.setName(soapModel.getName());
        model.setDescription(soapModel.getDescription());
        model.setIsPublic(soapModel.getIsPublic());
        model.setCreationTime(soapModel.getCreationTime());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Route> toModels(RouteSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Route> models = new ArrayList<Route>(soapModels.length);

        for (RouteSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _idRoute;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setIdRoute(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _idRoute;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Route.class;
    }

    @Override
    public String getModelClassName() {
        return Route.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("idRoute", getIdRoute());
        attributes.put("idAuthor", getIdAuthor());
        attributes.put("type", getType());
        attributes.put("name", getName());
        attributes.put("description", getDescription());
        attributes.put("isPublic", getIsPublic());
        attributes.put("creationTime", getCreationTime());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long idRoute = (Long) attributes.get("idRoute");

        if (idRoute != null) {
            setIdRoute(idRoute);
        }

        Long idAuthor = (Long) attributes.get("idAuthor");

        if (idAuthor != null) {
            setIdAuthor(idAuthor);
        }

        String type = (String) attributes.get("type");

        if (type != null) {
            setType(type);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }

        Boolean isPublic = (Boolean) attributes.get("isPublic");

        if (isPublic != null) {
            setIsPublic(isPublic);
        }

        Date creationTime = (Date) attributes.get("creationTime");

        if (creationTime != null) {
            setCreationTime(creationTime);
        }
    }

    @JSON
    @Override
    public long getIdRoute() {
        return _idRoute;
    }

    @Override
    public void setIdRoute(long idRoute) {
        _idRoute = idRoute;
    }

    @JSON
    @Override
    public long getIdAuthor() {
        return _idAuthor;
    }

    @Override
    public void setIdAuthor(long idAuthor) {
        _columnBitmask |= IDAUTHOR_COLUMN_BITMASK;

        if (!_setOriginalIdAuthor) {
            _setOriginalIdAuthor = true;

            _originalIdAuthor = _idAuthor;
        }

        _idAuthor = idAuthor;
    }

    public long getOriginalIdAuthor() {
        return _originalIdAuthor;
    }

    @JSON
    @Override
    public String getType() {
        if (_type == null) {
            return StringPool.BLANK;
        } else {
            return _type;
        }
    }

    @Override
    public void setType(String type) {
        _type = type;
    }

    @JSON
    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @JSON
    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @JSON
    @Override
    public boolean getIsPublic() {
        return _isPublic;
    }

    @Override
    public boolean isIsPublic() {
        return _isPublic;
    }

    @Override
    public void setIsPublic(boolean isPublic) {
        _columnBitmask |= ISPUBLIC_COLUMN_BITMASK;

        if (!_setOriginalIsPublic) {
            _setOriginalIsPublic = true;

            _originalIsPublic = _isPublic;
        }

        _isPublic = isPublic;
    }

    public boolean getOriginalIsPublic() {
        return _originalIsPublic;
    }

    @JSON
    @Override
    public Date getCreationTime() {
        return _creationTime;
    }

    @Override
    public void setCreationTime(Date creationTime) {
        _columnBitmask = -1L;

        _creationTime = creationTime;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Route.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Route toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Route) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        RouteImpl routeImpl = new RouteImpl();

        routeImpl.setIdRoute(getIdRoute());
        routeImpl.setIdAuthor(getIdAuthor());
        routeImpl.setType(getType());
        routeImpl.setName(getName());
        routeImpl.setDescription(getDescription());
        routeImpl.setIsPublic(getIsPublic());
        routeImpl.setCreationTime(getCreationTime());

        routeImpl.resetOriginalValues();

        return routeImpl;
    }

    @Override
    public int compareTo(Route route) {
        int value = 0;

        value = DateUtil.compareTo(getCreationTime(), route.getCreationTime());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Route)) {
            return false;
        }

        Route route = (Route) obj;

        long primaryKey = route.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        RouteModelImpl routeModelImpl = this;

        routeModelImpl._originalIdAuthor = routeModelImpl._idAuthor;

        routeModelImpl._setOriginalIdAuthor = false;

        routeModelImpl._originalIsPublic = routeModelImpl._isPublic;

        routeModelImpl._setOriginalIsPublic = false;

        routeModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Route> toCacheModel() {
        RouteCacheModel routeCacheModel = new RouteCacheModel();

        routeCacheModel.idRoute = getIdRoute();

        routeCacheModel.idAuthor = getIdAuthor();

        routeCacheModel.type = getType();

        String type = routeCacheModel.type;

        if ((type != null) && (type.length() == 0)) {
            routeCacheModel.type = null;
        }

        routeCacheModel.name = getName();

        String name = routeCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            routeCacheModel.name = null;
        }

        routeCacheModel.description = getDescription();

        String description = routeCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            routeCacheModel.description = null;
        }

        routeCacheModel.isPublic = getIsPublic();

        Date creationTime = getCreationTime();

        if (creationTime != null) {
            routeCacheModel.creationTime = creationTime.getTime();
        } else {
            routeCacheModel.creationTime = Long.MIN_VALUE;
        }

        return routeCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(15);

        sb.append("{idRoute=");
        sb.append(getIdRoute());
        sb.append(", idAuthor=");
        sb.append(getIdAuthor());
        sb.append(", type=");
        sb.append(getType());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", isPublic=");
        sb.append(getIsPublic());
        sb.append(", creationTime=");
        sb.append(getCreationTime());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(25);

        sb.append("<model><model-name>");
        sb.append("es.eina.tfg.model.Route");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>idRoute</column-name><column-value><![CDATA[");
        sb.append(getIdRoute());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>idAuthor</column-name><column-value><![CDATA[");
        sb.append(getIdAuthor());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>type</column-name><column-value><![CDATA[");
        sb.append(getType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>isPublic</column-name><column-value><![CDATA[");
        sb.append(getIsPublic());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>creationTime</column-name><column-value><![CDATA[");
        sb.append(getCreationTime());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
