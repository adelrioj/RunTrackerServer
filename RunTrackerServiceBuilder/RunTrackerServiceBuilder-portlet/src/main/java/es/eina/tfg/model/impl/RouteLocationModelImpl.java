package es.eina.tfg.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import es.eina.tfg.model.RouteLocation;
import es.eina.tfg.model.RouteLocationModel;
import es.eina.tfg.model.RouteLocationSoap;
import es.eina.tfg.service.persistence.RouteLocationPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the RouteLocation service. Represents a row in the &quot;GL_RouteLocation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link es.eina.tfg.model.RouteLocationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RouteLocationImpl}.
 * </p>
 *
 * @author adelrioj
 * @see RouteLocationImpl
 * @see es.eina.tfg.model.RouteLocation
 * @see es.eina.tfg.model.RouteLocationModel
 * @generated
 */
@JSON(strict = true)
public class RouteLocationModelImpl extends BaseModelImpl<RouteLocation>
    implements RouteLocationModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a route location model instance should use the {@link es.eina.tfg.model.RouteLocation} interface instead.
     */
    public static final String TABLE_NAME = "GL_RouteLocation";
    public static final Object[][] TABLE_COLUMNS = {
            { "idRouteLocation", Types.BIGINT },
            { "idRoute", Types.BIGINT },
            { "latitude", Types.DOUBLE },
            { "longitude", Types.DOUBLE }
        };
    public static final String TABLE_SQL_CREATE = "create table GL_RouteLocation (idRouteLocation LONG not null,idRoute LONG not null,latitude DOUBLE,longitude DOUBLE,primary key (idRouteLocation, idRoute))";
    public static final String TABLE_SQL_DROP = "drop table GL_RouteLocation";
    public static final String ORDER_BY_JPQL = " ORDER BY routeLocation.id.idRoute ASC";
    public static final String ORDER_BY_SQL = " ORDER BY GL_RouteLocation.idRoute ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.es.eina.tfg.model.RouteLocation"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.es.eina.tfg.model.RouteLocation"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.es.eina.tfg.model.RouteLocation"),
            true);
    public static long IDROUTE_COLUMN_BITMASK = 1L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.es.eina.tfg.model.RouteLocation"));
    private static ClassLoader _classLoader = RouteLocation.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            RouteLocation.class
        };
    private long _idRouteLocation;
    private long _idRoute;
    private long _originalIdRoute;
    private boolean _setOriginalIdRoute;
    private double _latitude;
    private double _longitude;
    private long _columnBitmask;
    private RouteLocation _escapedModel;

    public RouteLocationModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static RouteLocation toModel(RouteLocationSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        RouteLocation model = new RouteLocationImpl();

        model.setIdRouteLocation(soapModel.getIdRouteLocation());
        model.setIdRoute(soapModel.getIdRoute());
        model.setLatitude(soapModel.getLatitude());
        model.setLongitude(soapModel.getLongitude());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<RouteLocation> toModels(RouteLocationSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<RouteLocation> models = new ArrayList<RouteLocation>(soapModels.length);

        for (RouteLocationSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public RouteLocationPK getPrimaryKey() {
        return new RouteLocationPK(_idRouteLocation, _idRoute);
    }

    @Override
    public void setPrimaryKey(RouteLocationPK primaryKey) {
        setIdRouteLocation(primaryKey.idRouteLocation);
        setIdRoute(primaryKey.idRoute);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new RouteLocationPK(_idRouteLocation, _idRoute);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((RouteLocationPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return RouteLocation.class;
    }

    @Override
    public String getModelClassName() {
        return RouteLocation.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("idRouteLocation", getIdRouteLocation());
        attributes.put("idRoute", getIdRoute());
        attributes.put("latitude", getLatitude());
        attributes.put("longitude", getLongitude());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long idRouteLocation = (Long) attributes.get("idRouteLocation");

        if (idRouteLocation != null) {
            setIdRouteLocation(idRouteLocation);
        }

        Long idRoute = (Long) attributes.get("idRoute");

        if (idRoute != null) {
            setIdRoute(idRoute);
        }

        Double latitude = (Double) attributes.get("latitude");

        if (latitude != null) {
            setLatitude(latitude);
        }

        Double longitude = (Double) attributes.get("longitude");

        if (longitude != null) {
            setLongitude(longitude);
        }
    }

    @JSON
    @Override
    public long getIdRouteLocation() {
        return _idRouteLocation;
    }

    @Override
    public void setIdRouteLocation(long idRouteLocation) {
        _idRouteLocation = idRouteLocation;
    }

    @JSON
    @Override
    public long getIdRoute() {
        return _idRoute;
    }

    @Override
    public void setIdRoute(long idRoute) {
        _columnBitmask = -1L;

        if (!_setOriginalIdRoute) {
            _setOriginalIdRoute = true;

            _originalIdRoute = _idRoute;
        }

        _idRoute = idRoute;
    }

    public long getOriginalIdRoute() {
        return _originalIdRoute;
    }

    @JSON
    @Override
    public double getLatitude() {
        return _latitude;
    }

    @Override
    public void setLatitude(double latitude) {
        _latitude = latitude;
    }

    @JSON
    @Override
    public double getLongitude() {
        return _longitude;
    }

    @Override
    public void setLongitude(double longitude) {
        _longitude = longitude;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public RouteLocation toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (RouteLocation) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        RouteLocationImpl routeLocationImpl = new RouteLocationImpl();

        routeLocationImpl.setIdRouteLocation(getIdRouteLocation());
        routeLocationImpl.setIdRoute(getIdRoute());
        routeLocationImpl.setLatitude(getLatitude());
        routeLocationImpl.setLongitude(getLongitude());

        routeLocationImpl.resetOriginalValues();

        return routeLocationImpl;
    }

    @Override
    public int compareTo(RouteLocation routeLocation) {
        int value = 0;

        if (getIdRoute() < routeLocation.getIdRoute()) {
            value = -1;
        } else if (getIdRoute() > routeLocation.getIdRoute()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof RouteLocation)) {
            return false;
        }

        RouteLocation routeLocation = (RouteLocation) obj;

        RouteLocationPK primaryKey = routeLocation.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        RouteLocationModelImpl routeLocationModelImpl = this;

        routeLocationModelImpl._originalIdRoute = routeLocationModelImpl._idRoute;

        routeLocationModelImpl._setOriginalIdRoute = false;

        routeLocationModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<RouteLocation> toCacheModel() {
        RouteLocationCacheModel routeLocationCacheModel = new RouteLocationCacheModel();

        routeLocationCacheModel.idRouteLocation = getIdRouteLocation();

        routeLocationCacheModel.idRoute = getIdRoute();

        routeLocationCacheModel.latitude = getLatitude();

        routeLocationCacheModel.longitude = getLongitude();

        return routeLocationCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{idRouteLocation=");
        sb.append(getIdRouteLocation());
        sb.append(", idRoute=");
        sb.append(getIdRoute());
        sb.append(", latitude=");
        sb.append(getLatitude());
        sb.append(", longitude=");
        sb.append(getLongitude());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("es.eina.tfg.model.RouteLocation");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>idRouteLocation</column-name><column-value><![CDATA[");
        sb.append(getIdRouteLocation());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>idRoute</column-name><column-value><![CDATA[");
        sb.append(getIdRoute());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>latitude</column-name><column-value><![CDATA[");
        sb.append(getLatitude());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>longitude</column-name><column-value><![CDATA[");
        sb.append(getLongitude());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
