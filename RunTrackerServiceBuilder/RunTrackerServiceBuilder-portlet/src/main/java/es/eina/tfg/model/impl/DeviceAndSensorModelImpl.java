package es.eina.tfg.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import es.eina.tfg.model.DeviceAndSensor;
import es.eina.tfg.model.DeviceAndSensorModel;
import es.eina.tfg.service.persistence.DeviceAndSensorPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the DeviceAndSensor service. Represents a row in the &quot;GL_DeviceAndSensor&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link es.eina.tfg.model.DeviceAndSensorModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DeviceAndSensorImpl}.
 * </p>
 *
 * @author adelrioj
 * @see DeviceAndSensorImpl
 * @see es.eina.tfg.model.DeviceAndSensor
 * @see es.eina.tfg.model.DeviceAndSensorModel
 * @generated
 */
public class DeviceAndSensorModelImpl extends BaseModelImpl<DeviceAndSensor>
    implements DeviceAndSensorModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a device and sensor model instance should use the {@link es.eina.tfg.model.DeviceAndSensor} interface instead.
     */
    public static final String TABLE_NAME = "GL_DeviceAndSensor";
    public static final Object[][] TABLE_COLUMNS = {
            { "idDevice", Types.BIGINT },
            { "idSensor", Types.BIGINT },
            { "status", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table GL_DeviceAndSensor (idDevice LONG not null,idSensor LONG not null,status BOOLEAN,primary key (idDevice, idSensor))";
    public static final String TABLE_SQL_DROP = "drop table GL_DeviceAndSensor";
    public static final String ORDER_BY_JPQL = " ORDER BY deviceAndSensor.id.idDevice ASC";
    public static final String ORDER_BY_SQL = " ORDER BY GL_DeviceAndSensor.idDevice ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.es.eina.tfg.model.DeviceAndSensor"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.es.eina.tfg.model.DeviceAndSensor"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.es.eina.tfg.model.DeviceAndSensor"),
            true);
    public static long IDDEVICE_COLUMN_BITMASK = 1L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.es.eina.tfg.model.DeviceAndSensor"));
    private static ClassLoader _classLoader = DeviceAndSensor.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            DeviceAndSensor.class
        };
    private long _idDevice;
    private long _originalIdDevice;
    private boolean _setOriginalIdDevice;
    private long _idSensor;
    private boolean _status;
    private long _columnBitmask;
    private DeviceAndSensor _escapedModel;

    public DeviceAndSensorModelImpl() {
    }

    @Override
    public DeviceAndSensorPK getPrimaryKey() {
        return new DeviceAndSensorPK(_idDevice, _idSensor);
    }

    @Override
    public void setPrimaryKey(DeviceAndSensorPK primaryKey) {
        setIdDevice(primaryKey.idDevice);
        setIdSensor(primaryKey.idSensor);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new DeviceAndSensorPK(_idDevice, _idSensor);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((DeviceAndSensorPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return DeviceAndSensor.class;
    }

    @Override
    public String getModelClassName() {
        return DeviceAndSensor.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("idDevice", getIdDevice());
        attributes.put("idSensor", getIdSensor());
        attributes.put("status", getStatus());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long idDevice = (Long) attributes.get("idDevice");

        if (idDevice != null) {
            setIdDevice(idDevice);
        }

        Long idSensor = (Long) attributes.get("idSensor");

        if (idSensor != null) {
            setIdSensor(idSensor);
        }

        Boolean status = (Boolean) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }
    }

    @Override
    public long getIdDevice() {
        return _idDevice;
    }

    @Override
    public void setIdDevice(long idDevice) {
        _columnBitmask = -1L;

        if (!_setOriginalIdDevice) {
            _setOriginalIdDevice = true;

            _originalIdDevice = _idDevice;
        }

        _idDevice = idDevice;
    }

    public long getOriginalIdDevice() {
        return _originalIdDevice;
    }

    @Override
    public long getIdSensor() {
        return _idSensor;
    }

    @Override
    public void setIdSensor(long idSensor) {
        _idSensor = idSensor;
    }

    @Override
    public boolean getStatus() {
        return _status;
    }

    @Override
    public boolean isStatus() {
        return _status;
    }

    @Override
    public void setStatus(boolean status) {
        _status = status;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public DeviceAndSensor toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (DeviceAndSensor) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        DeviceAndSensorImpl deviceAndSensorImpl = new DeviceAndSensorImpl();

        deviceAndSensorImpl.setIdDevice(getIdDevice());
        deviceAndSensorImpl.setIdSensor(getIdSensor());
        deviceAndSensorImpl.setStatus(getStatus());

        deviceAndSensorImpl.resetOriginalValues();

        return deviceAndSensorImpl;
    }

    @Override
    public int compareTo(DeviceAndSensor deviceAndSensor) {
        int value = 0;

        if (getIdDevice() < deviceAndSensor.getIdDevice()) {
            value = -1;
        } else if (getIdDevice() > deviceAndSensor.getIdDevice()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof DeviceAndSensor)) {
            return false;
        }

        DeviceAndSensor deviceAndSensor = (DeviceAndSensor) obj;

        DeviceAndSensorPK primaryKey = deviceAndSensor.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        DeviceAndSensorModelImpl deviceAndSensorModelImpl = this;

        deviceAndSensorModelImpl._originalIdDevice = deviceAndSensorModelImpl._idDevice;

        deviceAndSensorModelImpl._setOriginalIdDevice = false;

        deviceAndSensorModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<DeviceAndSensor> toCacheModel() {
        DeviceAndSensorCacheModel deviceAndSensorCacheModel = new DeviceAndSensorCacheModel();

        deviceAndSensorCacheModel.idDevice = getIdDevice();

        deviceAndSensorCacheModel.idSensor = getIdSensor();

        deviceAndSensorCacheModel.status = getStatus();

        return deviceAndSensorCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{idDevice=");
        sb.append(getIdDevice());
        sb.append(", idSensor=");
        sb.append(getIdSensor());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("es.eina.tfg.model.DeviceAndSensor");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>idDevice</column-name><column-value><![CDATA[");
        sb.append(getIdDevice());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>idSensor</column-name><column-value><![CDATA[");
        sb.append(getIdSensor());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
