/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package es.eina.tfg.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import es.eina.tfg.model.Location;
import es.eina.tfg.model.LocationModel;
import es.eina.tfg.model.LocationSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Location service. Represents a row in the &quot;GL_Location&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link es.eina.tfg.model.LocationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LocationImpl}.
 * </p>
 *
 * @author adelrioj
 * @see LocationImpl
 * @see es.eina.tfg.model.Location
 * @see es.eina.tfg.model.LocationModel
 * @generated
 */
@JSON(strict = true)
public class LocationModelImpl extends BaseModelImpl<Location>
	implements LocationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a location model instance should use the {@link es.eina.tfg.model.Location} interface instead.
	 */
	public static final String TABLE_NAME = "GL_Location";
	public static final Object[][] TABLE_COLUMNS = {
			{ "measurementId", Types.BIGINT },
			{ "raceId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "deviceId", Types.BIGINT },
			{ "sensorId", Types.BIGINT },
			{ "time_", Types.TIMESTAMP },
			{ "sensorMode", Types.VARCHAR },
			{ "sysRef", Types.INTEGER },
			{ "latitude", Types.DOUBLE },
			{ "longitude", Types.DOUBLE },
			{ "speed", Types.DOUBLE },
			{ "distance", Types.DOUBLE },
			{ "altitude", Types.DOUBLE }
		};
	public static final String TABLE_SQL_CREATE = "create table GL_Location (measurementId LONG not null primary key,raceId LONG,userId LONG,deviceId LONG,sensorId LONG,time_ DATE null,sensorMode VARCHAR(75) null,sysRef INTEGER,latitude DOUBLE,longitude DOUBLE,speed DOUBLE,distance DOUBLE,altitude DOUBLE)";
	public static final String TABLE_SQL_DROP = "drop table GL_Location";
	public static final String ORDER_BY_JPQL = " ORDER BY location.time ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GL_Location.time_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.es.eina.tfg.model.Location"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.es.eina.tfg.model.Location"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.es.eina.tfg.model.Location"),
			true);
	public static long RACEID_COLUMN_BITMASK = 1L;
	public static long TIME_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Location toModel(LocationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Location model = new LocationImpl();

		model.setMeasurementId(soapModel.getMeasurementId());
		model.setRaceId(soapModel.getRaceId());
		model.setUserId(soapModel.getUserId());
		model.setDeviceId(soapModel.getDeviceId());
		model.setSensorId(soapModel.getSensorId());
		model.setTime(soapModel.getTime());
		model.setSensorMode(soapModel.getSensorMode());
		model.setSysRef(soapModel.getSysRef());
		model.setLatitude(soapModel.getLatitude());
		model.setLongitude(soapModel.getLongitude());
		model.setSpeed(soapModel.getSpeed());
		model.setDistance(soapModel.getDistance());
		model.setAltitude(soapModel.getAltitude());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Location> toModels(LocationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Location> models = new ArrayList<Location>(soapModels.length);

		for (LocationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.es.eina.tfg.model.Location"));

	public LocationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _measurementId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMeasurementId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _measurementId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Location.class;
	}

	@Override
	public String getModelClassName() {
		return Location.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("measurementId", getMeasurementId());
		attributes.put("raceId", getRaceId());
		attributes.put("userId", getUserId());
		attributes.put("deviceId", getDeviceId());
		attributes.put("sensorId", getSensorId());
		attributes.put("time", getTime());
		attributes.put("sensorMode", getSensorMode());
		attributes.put("sysRef", getSysRef());
		attributes.put("latitude", getLatitude());
		attributes.put("longitude", getLongitude());
		attributes.put("speed", getSpeed());
		attributes.put("distance", getDistance());
		attributes.put("altitude", getAltitude());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long measurementId = (Long)attributes.get("measurementId");

		if (measurementId != null) {
			setMeasurementId(measurementId);
		}

		Long raceId = (Long)attributes.get("raceId");

		if (raceId != null) {
			setRaceId(raceId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long deviceId = (Long)attributes.get("deviceId");

		if (deviceId != null) {
			setDeviceId(deviceId);
		}

		Long sensorId = (Long)attributes.get("sensorId");

		if (sensorId != null) {
			setSensorId(sensorId);
		}

		Date time = (Date)attributes.get("time");

		if (time != null) {
			setTime(time);
		}

		String sensorMode = (String)attributes.get("sensorMode");

		if (sensorMode != null) {
			setSensorMode(sensorMode);
		}

		Integer sysRef = (Integer)attributes.get("sysRef");

		if (sysRef != null) {
			setSysRef(sysRef);
		}

		Double latitude = (Double)attributes.get("latitude");

		if (latitude != null) {
			setLatitude(latitude);
		}

		Double longitude = (Double)attributes.get("longitude");

		if (longitude != null) {
			setLongitude(longitude);
		}

		Double speed = (Double)attributes.get("speed");

		if (speed != null) {
			setSpeed(speed);
		}

		Double distance = (Double)attributes.get("distance");

		if (distance != null) {
			setDistance(distance);
		}

		Double altitude = (Double)attributes.get("altitude");

		if (altitude != null) {
			setAltitude(altitude);
		}
	}

	@JSON
	@Override
	public long getMeasurementId() {
		return _measurementId;
	}

	@Override
	public void setMeasurementId(long measurementId) {
		_measurementId = measurementId;
	}

	@JSON
	@Override
	public Long getRaceId() {
		return _raceId;
	}

	@Override
	public void setRaceId(Long raceId) {
		_columnBitmask |= RACEID_COLUMN_BITMASK;

		if (!_setOriginalRaceId) {
			_setOriginalRaceId = true;

			_originalRaceId = _raceId;
		}

		_raceId = raceId;
	}

	public Long getOriginalRaceId() {
		return _originalRaceId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public long getDeviceId() {
		return _deviceId;
	}

	@Override
	public void setDeviceId(long deviceId) {
		_deviceId = deviceId;
	}

	@JSON
	@Override
	public long getSensorId() {
		return _sensorId;
	}

	@Override
	public void setSensorId(long sensorId) {
		_sensorId = sensorId;
	}

	@JSON
	@Override
	public Date getTime() {
		return _time;
	}

	@Override
	public void setTime(Date time) {
		_columnBitmask = -1L;

		_time = time;
	}

	@JSON
	@Override
	public String getSensorMode() {
		if (_sensorMode == null) {
			return StringPool.BLANK;
		}
		else {
			return _sensorMode;
		}
	}

	@Override
	public void setSensorMode(String sensorMode) {
		_sensorMode = sensorMode;
	}

	@JSON
	@Override
	public int getSysRef() {
		return _sysRef;
	}

	@Override
	public void setSysRef(int sysRef) {
		_sysRef = sysRef;
	}

	@JSON
	@Override
	public double getLatitude() {
		return _latitude;
	}

	@Override
	public void setLatitude(double latitude) {
		_latitude = latitude;
	}

	@JSON
	@Override
	public double getLongitude() {
		return _longitude;
	}

	@Override
	public void setLongitude(double longitude) {
		_longitude = longitude;
	}

	@JSON
	@Override
	public double getSpeed() {
		return _speed;
	}

	@Override
	public void setSpeed(double speed) {
		_speed = speed;
	}

	@JSON
	@Override
	public double getDistance() {
		return _distance;
	}

	@Override
	public void setDistance(double distance) {
		_distance = distance;
	}

	@JSON
	@Override
	public double getAltitude() {
		return _altitude;
	}

	@Override
	public void setAltitude(double altitude) {
		_altitude = altitude;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Location.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Location toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Location)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LocationImpl locationImpl = new LocationImpl();

		locationImpl.setMeasurementId(getMeasurementId());
		locationImpl.setRaceId(getRaceId());
		locationImpl.setUserId(getUserId());
		locationImpl.setDeviceId(getDeviceId());
		locationImpl.setSensorId(getSensorId());
		locationImpl.setTime(getTime());
		locationImpl.setSensorMode(getSensorMode());
		locationImpl.setSysRef(getSysRef());
		locationImpl.setLatitude(getLatitude());
		locationImpl.setLongitude(getLongitude());
		locationImpl.setSpeed(getSpeed());
		locationImpl.setDistance(getDistance());
		locationImpl.setAltitude(getAltitude());

		locationImpl.resetOriginalValues();

		return locationImpl;
	}

	@Override
	public int compareTo(Location location) {
		int value = 0;

		value = DateUtil.compareTo(getTime(), location.getTime());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Location)) {
			return false;
		}

		Location location = (Location)obj;

		long primaryKey = location.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		LocationModelImpl locationModelImpl = this;

		locationModelImpl._originalRaceId = locationModelImpl._raceId;

		locationModelImpl._setOriginalRaceId = false;

		locationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Location> toCacheModel() {
		LocationCacheModel locationCacheModel = new LocationCacheModel();

		locationCacheModel.measurementId = getMeasurementId();

		locationCacheModel.raceId = getRaceId();

		locationCacheModel.userId = getUserId();

		locationCacheModel.deviceId = getDeviceId();

		locationCacheModel.sensorId = getSensorId();

		Date time = getTime();

		if (time != null) {
			locationCacheModel.time = time.getTime();
		}
		else {
			locationCacheModel.time = Long.MIN_VALUE;
		}

		locationCacheModel.sensorMode = getSensorMode();

		String sensorMode = locationCacheModel.sensorMode;

		if ((sensorMode != null) && (sensorMode.length() == 0)) {
			locationCacheModel.sensorMode = null;
		}

		locationCacheModel.sysRef = getSysRef();

		locationCacheModel.latitude = getLatitude();

		locationCacheModel.longitude = getLongitude();

		locationCacheModel.speed = getSpeed();

		locationCacheModel.distance = getDistance();

		locationCacheModel.altitude = getAltitude();

		return locationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{measurementId=");
		sb.append(getMeasurementId());
		sb.append(", raceId=");
		sb.append(getRaceId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", deviceId=");
		sb.append(getDeviceId());
		sb.append(", sensorId=");
		sb.append(getSensorId());
		sb.append(", time=");
		sb.append(getTime());
		sb.append(", sensorMode=");
		sb.append(getSensorMode());
		sb.append(", sysRef=");
		sb.append(getSysRef());
		sb.append(", latitude=");
		sb.append(getLatitude());
		sb.append(", longitude=");
		sb.append(getLongitude());
		sb.append(", speed=");
		sb.append(getSpeed());
		sb.append(", distance=");
		sb.append(getDistance());
		sb.append(", altitude=");
		sb.append(getAltitude());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("es.eina.tfg.model.Location");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>measurementId</column-name><column-value><![CDATA[");
		sb.append(getMeasurementId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>raceId</column-name><column-value><![CDATA[");
		sb.append(getRaceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deviceId</column-name><column-value><![CDATA[");
		sb.append(getDeviceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sensorId</column-name><column-value><![CDATA[");
		sb.append(getSensorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>time</column-name><column-value><![CDATA[");
		sb.append(getTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sensorMode</column-name><column-value><![CDATA[");
		sb.append(getSensorMode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sysRef</column-name><column-value><![CDATA[");
		sb.append(getSysRef());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>latitude</column-name><column-value><![CDATA[");
		sb.append(getLatitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>longitude</column-name><column-value><![CDATA[");
		sb.append(getLongitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>speed</column-name><column-value><![CDATA[");
		sb.append(getSpeed());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>distance</column-name><column-value><![CDATA[");
		sb.append(getDistance());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>altitude</column-name><column-value><![CDATA[");
		sb.append(getAltitude());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Location.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Location.class
		};
	private long _measurementId;
	private Long _raceId;
	private Long _originalRaceId;
	private boolean _setOriginalRaceId;
	private long _userId;
	private String _userUuid;
	private long _deviceId;
	private long _sensorId;
	private Date _time;
	private String _sensorMode;
	private int _sysRef;
	private double _latitude;
	private double _longitude;
	private double _speed;
	private double _distance;
	private double _altitude;
	private long _columnBitmask;
	private Location _escapedModel;
}