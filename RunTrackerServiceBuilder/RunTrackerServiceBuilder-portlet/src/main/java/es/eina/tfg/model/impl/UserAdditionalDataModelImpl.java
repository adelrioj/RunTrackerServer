package es.eina.tfg.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import es.eina.tfg.model.UserAdditionalData;
import es.eina.tfg.model.UserAdditionalDataModel;
import es.eina.tfg.model.UserAdditionalDataSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the UserAdditionalData service. Represents a row in the &quot;GL_UserAdditionalData&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link es.eina.tfg.model.UserAdditionalDataModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserAdditionalDataImpl}.
 * </p>
 *
 * @author adelrioj
 * @see UserAdditionalDataImpl
 * @see es.eina.tfg.model.UserAdditionalData
 * @see es.eina.tfg.model.UserAdditionalDataModel
 * @generated
 */
@JSON(strict = true)
public class UserAdditionalDataModelImpl extends BaseModelImpl<UserAdditionalData>
    implements UserAdditionalDataModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a user additional data model instance should use the {@link es.eina.tfg.model.UserAdditionalData} interface instead.
     */
    public static final String TABLE_NAME = "GL_UserAdditionalData";
    public static final Object[][] TABLE_COLUMNS = {
            { "idUser", Types.BIGINT },
            { "weight", Types.INTEGER },
            { "height", Types.INTEGER },
            { "smsCount", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table GL_UserAdditionalData (idUser LONG not null primary key,weight INTEGER,height INTEGER,smsCount LONG)";
    public static final String TABLE_SQL_DROP = "drop table GL_UserAdditionalData";
    public static final String ORDER_BY_JPQL = " ORDER BY userAdditionalData.idUser ASC";
    public static final String ORDER_BY_SQL = " ORDER BY GL_UserAdditionalData.idUser ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.es.eina.tfg.model.UserAdditionalData"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.es.eina.tfg.model.UserAdditionalData"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.es.eina.tfg.model.UserAdditionalData"));
    private static ClassLoader _classLoader = UserAdditionalData.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            UserAdditionalData.class
        };
    private long _idUser;
    private int _weight;
    private int _height;
    private long _smsCount;
    private UserAdditionalData _escapedModel;

    public UserAdditionalDataModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static UserAdditionalData toModel(UserAdditionalDataSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        UserAdditionalData model = new UserAdditionalDataImpl();

        model.setIdUser(soapModel.getIdUser());
        model.setWeight(soapModel.getWeight());
        model.setHeight(soapModel.getHeight());
        model.setSmsCount(soapModel.getSmsCount());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<UserAdditionalData> toModels(
        UserAdditionalDataSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<UserAdditionalData> models = new ArrayList<UserAdditionalData>(soapModels.length);

        for (UserAdditionalDataSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _idUser;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setIdUser(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _idUser;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return UserAdditionalData.class;
    }

    @Override
    public String getModelClassName() {
        return UserAdditionalData.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("idUser", getIdUser());
        attributes.put("weight", getWeight());
        attributes.put("height", getHeight());
        attributes.put("smsCount", getSmsCount());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long idUser = (Long) attributes.get("idUser");

        if (idUser != null) {
            setIdUser(idUser);
        }

        Integer weight = (Integer) attributes.get("weight");

        if (weight != null) {
            setWeight(weight);
        }

        Integer height = (Integer) attributes.get("height");

        if (height != null) {
            setHeight(height);
        }

        Long smsCount = (Long) attributes.get("smsCount");

        if (smsCount != null) {
            setSmsCount(smsCount);
        }
    }

    @JSON
    @Override
    public long getIdUser() {
        return _idUser;
    }

    @Override
    public void setIdUser(long idUser) {
        _idUser = idUser;
    }

    @JSON
    @Override
    public int getWeight() {
        return _weight;
    }

    @Override
    public void setWeight(int weight) {
        _weight = weight;
    }

    @JSON
    @Override
    public int getHeight() {
        return _height;
    }

    @Override
    public void setHeight(int height) {
        _height = height;
    }

    @JSON
    @Override
    public long getSmsCount() {
        return _smsCount;
    }

    @Override
    public void setSmsCount(long smsCount) {
        _smsCount = smsCount;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            UserAdditionalData.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public UserAdditionalData toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (UserAdditionalData) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        UserAdditionalDataImpl userAdditionalDataImpl = new UserAdditionalDataImpl();

        userAdditionalDataImpl.setIdUser(getIdUser());
        userAdditionalDataImpl.setWeight(getWeight());
        userAdditionalDataImpl.setHeight(getHeight());
        userAdditionalDataImpl.setSmsCount(getSmsCount());

        userAdditionalDataImpl.resetOriginalValues();

        return userAdditionalDataImpl;
    }

    @Override
    public int compareTo(UserAdditionalData userAdditionalData) {
        long primaryKey = userAdditionalData.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof UserAdditionalData)) {
            return false;
        }

        UserAdditionalData userAdditionalData = (UserAdditionalData) obj;

        long primaryKey = userAdditionalData.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<UserAdditionalData> toCacheModel() {
        UserAdditionalDataCacheModel userAdditionalDataCacheModel = new UserAdditionalDataCacheModel();

        userAdditionalDataCacheModel.idUser = getIdUser();

        userAdditionalDataCacheModel.weight = getWeight();

        userAdditionalDataCacheModel.height = getHeight();

        userAdditionalDataCacheModel.smsCount = getSmsCount();

        return userAdditionalDataCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{idUser=");
        sb.append(getIdUser());
        sb.append(", weight=");
        sb.append(getWeight());
        sb.append(", height=");
        sb.append(getHeight());
        sb.append(", smsCount=");
        sb.append(getSmsCount());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("es.eina.tfg.model.UserAdditionalData");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>idUser</column-name><column-value><![CDATA[");
        sb.append(getIdUser());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>weight</column-name><column-value><![CDATA[");
        sb.append(getWeight());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>height</column-name><column-value><![CDATA[");
        sb.append(getHeight());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>smsCount</column-name><column-value><![CDATA[");
        sb.append(getSmsCount());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
