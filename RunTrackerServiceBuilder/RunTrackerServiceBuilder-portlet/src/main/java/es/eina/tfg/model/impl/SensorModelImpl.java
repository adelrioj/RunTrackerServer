package es.eina.tfg.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import es.eina.tfg.model.Sensor;
import es.eina.tfg.model.SensorModel;
import es.eina.tfg.model.SensorSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Sensor service. Represents a row in the &quot;GL_Sensor&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link es.eina.tfg.model.SensorModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SensorImpl}.
 * </p>
 *
 * @author adelrioj
 * @see SensorImpl
 * @see es.eina.tfg.model.Sensor
 * @see es.eina.tfg.model.SensorModel
 * @generated
 */
@JSON(strict = true)
public class SensorModelImpl extends BaseModelImpl<Sensor>
    implements SensorModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a sensor model instance should use the {@link es.eina.tfg.model.Sensor} interface instead.
     */
    public static final String TABLE_NAME = "GL_Sensor";
    public static final Object[][] TABLE_COLUMNS = {
            { "idSensor", Types.BIGINT },
            { "type_", Types.INTEGER },
            { "description", Types.VARCHAR },
            { "dataUnits", Types.VARCHAR },
            { "dataType", Types.VARCHAR },
            { "dataUncertainity", Types.VARCHAR },
            { "dataLowerRange", Types.VARCHAR },
            { "dataUpperRange", Types.VARCHAR },
            { "dataPacketFormat", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table GL_Sensor (idSensor LONG not null primary key,type_ INTEGER,description VARCHAR(75) null,dataUnits VARCHAR(75) null,dataType VARCHAR(75) null,dataUncertainity VARCHAR(75) null,dataLowerRange VARCHAR(75) null,dataUpperRange VARCHAR(75) null,dataPacketFormat VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table GL_Sensor";
    public static final String ORDER_BY_JPQL = " ORDER BY sensor.type ASC";
    public static final String ORDER_BY_SQL = " ORDER BY GL_Sensor.type_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.es.eina.tfg.model.Sensor"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.es.eina.tfg.model.Sensor"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.es.eina.tfg.model.Sensor"),
            true);
    public static long TYPE_COLUMN_BITMASK = 1L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.es.eina.tfg.model.Sensor"));
    private static ClassLoader _classLoader = Sensor.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Sensor.class };
    private long _idSensor;
    private int _type;
    private int _originalType;
    private boolean _setOriginalType;
    private String _description;
    private String _dataUnits;
    private String _dataType;
    private String _dataUncertainity;
    private String _dataLowerRange;
    private String _dataUpperRange;
    private String _dataPacketFormat;
    private long _columnBitmask;
    private Sensor _escapedModel;

    public SensorModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Sensor toModel(SensorSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Sensor model = new SensorImpl();

        model.setIdSensor(soapModel.getIdSensor());
        model.setType(soapModel.getType());
        model.setDescription(soapModel.getDescription());
        model.setDataUnits(soapModel.getDataUnits());
        model.setDataType(soapModel.getDataType());
        model.setDataUncertainity(soapModel.getDataUncertainity());
        model.setDataLowerRange(soapModel.getDataLowerRange());
        model.setDataUpperRange(soapModel.getDataUpperRange());
        model.setDataPacketFormat(soapModel.getDataPacketFormat());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Sensor> toModels(SensorSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Sensor> models = new ArrayList<Sensor>(soapModels.length);

        for (SensorSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _idSensor;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setIdSensor(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _idSensor;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Sensor.class;
    }

    @Override
    public String getModelClassName() {
        return Sensor.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("idSensor", getIdSensor());
        attributes.put("type", getType());
        attributes.put("description", getDescription());
        attributes.put("dataUnits", getDataUnits());
        attributes.put("dataType", getDataType());
        attributes.put("dataUncertainity", getDataUncertainity());
        attributes.put("dataLowerRange", getDataLowerRange());
        attributes.put("dataUpperRange", getDataUpperRange());
        attributes.put("dataPacketFormat", getDataPacketFormat());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long idSensor = (Long) attributes.get("idSensor");

        if (idSensor != null) {
            setIdSensor(idSensor);
        }

        Integer type = (Integer) attributes.get("type");

        if (type != null) {
            setType(type);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }

        String dataUnits = (String) attributes.get("dataUnits");

        if (dataUnits != null) {
            setDataUnits(dataUnits);
        }

        String dataType = (String) attributes.get("dataType");

        if (dataType != null) {
            setDataType(dataType);
        }

        String dataUncertainity = (String) attributes.get("dataUncertainity");

        if (dataUncertainity != null) {
            setDataUncertainity(dataUncertainity);
        }

        String dataLowerRange = (String) attributes.get("dataLowerRange");

        if (dataLowerRange != null) {
            setDataLowerRange(dataLowerRange);
        }

        String dataUpperRange = (String) attributes.get("dataUpperRange");

        if (dataUpperRange != null) {
            setDataUpperRange(dataUpperRange);
        }

        String dataPacketFormat = (String) attributes.get("dataPacketFormat");

        if (dataPacketFormat != null) {
            setDataPacketFormat(dataPacketFormat);
        }
    }

    @JSON
    @Override
    public long getIdSensor() {
        return _idSensor;
    }

    @Override
    public void setIdSensor(long idSensor) {
        _idSensor = idSensor;
    }

    @JSON
    @Override
    public int getType() {
        return _type;
    }

    @Override
    public void setType(int type) {
        _columnBitmask = -1L;

        if (!_setOriginalType) {
            _setOriginalType = true;

            _originalType = _type;
        }

        _type = type;
    }

    public int getOriginalType() {
        return _originalType;
    }

    @JSON
    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @JSON
    @Override
    public String getDataUnits() {
        if (_dataUnits == null) {
            return StringPool.BLANK;
        } else {
            return _dataUnits;
        }
    }

    @Override
    public void setDataUnits(String dataUnits) {
        _dataUnits = dataUnits;
    }

    @JSON
    @Override
    public String getDataType() {
        if (_dataType == null) {
            return StringPool.BLANK;
        } else {
            return _dataType;
        }
    }

    @Override
    public void setDataType(String dataType) {
        _dataType = dataType;
    }

    @JSON
    @Override
    public String getDataUncertainity() {
        if (_dataUncertainity == null) {
            return StringPool.BLANK;
        } else {
            return _dataUncertainity;
        }
    }

    @Override
    public void setDataUncertainity(String dataUncertainity) {
        _dataUncertainity = dataUncertainity;
    }

    @JSON
    @Override
    public String getDataLowerRange() {
        if (_dataLowerRange == null) {
            return StringPool.BLANK;
        } else {
            return _dataLowerRange;
        }
    }

    @Override
    public void setDataLowerRange(String dataLowerRange) {
        _dataLowerRange = dataLowerRange;
    }

    @JSON
    @Override
    public String getDataUpperRange() {
        if (_dataUpperRange == null) {
            return StringPool.BLANK;
        } else {
            return _dataUpperRange;
        }
    }

    @Override
    public void setDataUpperRange(String dataUpperRange) {
        _dataUpperRange = dataUpperRange;
    }

    @JSON
    @Override
    public String getDataPacketFormat() {
        if (_dataPacketFormat == null) {
            return StringPool.BLANK;
        } else {
            return _dataPacketFormat;
        }
    }

    @Override
    public void setDataPacketFormat(String dataPacketFormat) {
        _dataPacketFormat = dataPacketFormat;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Sensor.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Sensor toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Sensor) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        SensorImpl sensorImpl = new SensorImpl();

        sensorImpl.setIdSensor(getIdSensor());
        sensorImpl.setType(getType());
        sensorImpl.setDescription(getDescription());
        sensorImpl.setDataUnits(getDataUnits());
        sensorImpl.setDataType(getDataType());
        sensorImpl.setDataUncertainity(getDataUncertainity());
        sensorImpl.setDataLowerRange(getDataLowerRange());
        sensorImpl.setDataUpperRange(getDataUpperRange());
        sensorImpl.setDataPacketFormat(getDataPacketFormat());

        sensorImpl.resetOriginalValues();

        return sensorImpl;
    }

    @Override
    public int compareTo(Sensor sensor) {
        int value = 0;

        if (getType() < sensor.getType()) {
            value = -1;
        } else if (getType() > sensor.getType()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Sensor)) {
            return false;
        }

        Sensor sensor = (Sensor) obj;

        long primaryKey = sensor.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        SensorModelImpl sensorModelImpl = this;

        sensorModelImpl._originalType = sensorModelImpl._type;

        sensorModelImpl._setOriginalType = false;

        sensorModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Sensor> toCacheModel() {
        SensorCacheModel sensorCacheModel = new SensorCacheModel();

        sensorCacheModel.idSensor = getIdSensor();

        sensorCacheModel.type = getType();

        sensorCacheModel.description = getDescription();

        String description = sensorCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            sensorCacheModel.description = null;
        }

        sensorCacheModel.dataUnits = getDataUnits();

        String dataUnits = sensorCacheModel.dataUnits;

        if ((dataUnits != null) && (dataUnits.length() == 0)) {
            sensorCacheModel.dataUnits = null;
        }

        sensorCacheModel.dataType = getDataType();

        String dataType = sensorCacheModel.dataType;

        if ((dataType != null) && (dataType.length() == 0)) {
            sensorCacheModel.dataType = null;
        }

        sensorCacheModel.dataUncertainity = getDataUncertainity();

        String dataUncertainity = sensorCacheModel.dataUncertainity;

        if ((dataUncertainity != null) && (dataUncertainity.length() == 0)) {
            sensorCacheModel.dataUncertainity = null;
        }

        sensorCacheModel.dataLowerRange = getDataLowerRange();

        String dataLowerRange = sensorCacheModel.dataLowerRange;

        if ((dataLowerRange != null) && (dataLowerRange.length() == 0)) {
            sensorCacheModel.dataLowerRange = null;
        }

        sensorCacheModel.dataUpperRange = getDataUpperRange();

        String dataUpperRange = sensorCacheModel.dataUpperRange;

        if ((dataUpperRange != null) && (dataUpperRange.length() == 0)) {
            sensorCacheModel.dataUpperRange = null;
        }

        sensorCacheModel.dataPacketFormat = getDataPacketFormat();

        String dataPacketFormat = sensorCacheModel.dataPacketFormat;

        if ((dataPacketFormat != null) && (dataPacketFormat.length() == 0)) {
            sensorCacheModel.dataPacketFormat = null;
        }

        return sensorCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(19);

        sb.append("{idSensor=");
        sb.append(getIdSensor());
        sb.append(", type=");
        sb.append(getType());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", dataUnits=");
        sb.append(getDataUnits());
        sb.append(", dataType=");
        sb.append(getDataType());
        sb.append(", dataUncertainity=");
        sb.append(getDataUncertainity());
        sb.append(", dataLowerRange=");
        sb.append(getDataLowerRange());
        sb.append(", dataUpperRange=");
        sb.append(getDataUpperRange());
        sb.append(", dataPacketFormat=");
        sb.append(getDataPacketFormat());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(31);

        sb.append("<model><model-name>");
        sb.append("es.eina.tfg.model.Sensor");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>idSensor</column-name><column-value><![CDATA[");
        sb.append(getIdSensor());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>type</column-name><column-value><![CDATA[");
        sb.append(getType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dataUnits</column-name><column-value><![CDATA[");
        sb.append(getDataUnits());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dataType</column-name><column-value><![CDATA[");
        sb.append(getDataType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dataUncertainity</column-name><column-value><![CDATA[");
        sb.append(getDataUncertainity());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dataLowerRange</column-name><column-value><![CDATA[");
        sb.append(getDataLowerRange());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dataUpperRange</column-name><column-value><![CDATA[");
        sb.append(getDataUpperRange());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dataPacketFormat</column-name><column-value><![CDATA[");
        sb.append(getDataPacketFormat());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
