package es.eina.tfg.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import es.eina.tfg.model.Power;
import es.eina.tfg.model.PowerModel;
import es.eina.tfg.model.PowerSoap;
import es.eina.tfg.service.persistence.PowerPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Power service. Represents a row in the &quot;GL_Power&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link es.eina.tfg.model.PowerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PowerImpl}.
 * </p>
 *
 * @author adelrioj
 * @see PowerImpl
 * @see es.eina.tfg.model.Power
 * @see es.eina.tfg.model.PowerModel
 * @generated
 */
@JSON(strict = true)
public class PowerModelImpl extends BaseModelImpl<Power> implements PowerModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a power model instance should use the {@link es.eina.tfg.model.Power} interface instead.
     */
    public static final String TABLE_NAME = "GL_Power";
    public static final Object[][] TABLE_COLUMNS = {
            { "idMeasurement", Types.BIGINT },
            { "idRace", Types.BIGINT },
            { "idDevice", Types.BIGINT },
            { "idSensor", Types.BIGINT },
            { "time_", Types.TIMESTAMP },
            { "sensorMode", Types.VARCHAR },
            { "level", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table GL_Power (idMeasurement LONG not null,idRace LONG not null,idDevice LONG,idSensor LONG,time_ DATE null,sensorMode VARCHAR(75) null,level INTEGER,primary key (idMeasurement, idRace))";
    public static final String TABLE_SQL_DROP = "drop table GL_Power";
    public static final String ORDER_BY_JPQL = " ORDER BY power.time ASC";
    public static final String ORDER_BY_SQL = " ORDER BY GL_Power.time_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.es.eina.tfg.model.Power"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.es.eina.tfg.model.Power"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.es.eina.tfg.model.Power"),
            true);
    public static long IDRACE_COLUMN_BITMASK = 1L;
    public static long TIME_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.es.eina.tfg.model.Power"));
    private static ClassLoader _classLoader = Power.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Power.class };
    private long _idMeasurement;
    private Long _idRace;
    private Long _originalIdRace;
    private boolean _setOriginalIdRace;
    private long _idDevice;
    private long _idSensor;
    private Date _time;
    private String _sensorMode;
    private int _level;
    private long _columnBitmask;
    private Power _escapedModel;

    public PowerModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Power toModel(PowerSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Power model = new PowerImpl();

        model.setIdMeasurement(soapModel.getIdMeasurement());
        model.setIdRace(soapModel.getIdRace());
        model.setIdDevice(soapModel.getIdDevice());
        model.setIdSensor(soapModel.getIdSensor());
        model.setTime(soapModel.getTime());
        model.setSensorMode(soapModel.getSensorMode());
        model.setLevel(soapModel.getLevel());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Power> toModels(PowerSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Power> models = new ArrayList<Power>(soapModels.length);

        for (PowerSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public PowerPK getPrimaryKey() {
        return new PowerPK(_idMeasurement, _idRace);
    }

    @Override
    public void setPrimaryKey(PowerPK primaryKey) {
        setIdMeasurement(primaryKey.idMeasurement);
        setIdRace(primaryKey.idRace);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new PowerPK(_idMeasurement, _idRace);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((PowerPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return Power.class;
    }

    @Override
    public String getModelClassName() {
        return Power.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("idMeasurement", getIdMeasurement());
        attributes.put("idRace", getIdRace());
        attributes.put("idDevice", getIdDevice());
        attributes.put("idSensor", getIdSensor());
        attributes.put("time", getTime());
        attributes.put("sensorMode", getSensorMode());
        attributes.put("level", getLevel());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long idMeasurement = (Long) attributes.get("idMeasurement");

        if (idMeasurement != null) {
            setIdMeasurement(idMeasurement);
        }

        Long idRace = (Long) attributes.get("idRace");

        if (idRace != null) {
            setIdRace(idRace);
        }

        Long idDevice = (Long) attributes.get("idDevice");

        if (idDevice != null) {
            setIdDevice(idDevice);
        }

        Long idSensor = (Long) attributes.get("idSensor");

        if (idSensor != null) {
            setIdSensor(idSensor);
        }

        Date time = (Date) attributes.get("time");

        if (time != null) {
            setTime(time);
        }

        String sensorMode = (String) attributes.get("sensorMode");

        if (sensorMode != null) {
            setSensorMode(sensorMode);
        }

        Integer level = (Integer) attributes.get("level");

        if (level != null) {
            setLevel(level);
        }
    }

    @JSON
    @Override
    public long getIdMeasurement() {
        return _idMeasurement;
    }

    @Override
    public void setIdMeasurement(long idMeasurement) {
        _idMeasurement = idMeasurement;
    }

    @JSON
    @Override
    public Long getIdRace() {
        return _idRace;
    }

    @Override
    public void setIdRace(Long idRace) {
        _columnBitmask |= IDRACE_COLUMN_BITMASK;

        if (!_setOriginalIdRace) {
            _setOriginalIdRace = true;

            _originalIdRace = _idRace;
        }

        _idRace = idRace;
    }

    public Long getOriginalIdRace() {
        return _originalIdRace;
    }

    @JSON
    @Override
    public long getIdDevice() {
        return _idDevice;
    }

    @Override
    public void setIdDevice(long idDevice) {
        _idDevice = idDevice;
    }

    @JSON
    @Override
    public long getIdSensor() {
        return _idSensor;
    }

    @Override
    public void setIdSensor(long idSensor) {
        _idSensor = idSensor;
    }

    @JSON
    @Override
    public Date getTime() {
        return _time;
    }

    @Override
    public void setTime(Date time) {
        _columnBitmask = -1L;

        _time = time;
    }

    @JSON
    @Override
    public String getSensorMode() {
        if (_sensorMode == null) {
            return StringPool.BLANK;
        } else {
            return _sensorMode;
        }
    }

    @Override
    public void setSensorMode(String sensorMode) {
        _sensorMode = sensorMode;
    }

    @JSON
    @Override
    public int getLevel() {
        return _level;
    }

    @Override
    public void setLevel(int level) {
        _level = level;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public Power toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Power) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        PowerImpl powerImpl = new PowerImpl();

        powerImpl.setIdMeasurement(getIdMeasurement());
        powerImpl.setIdRace(getIdRace());
        powerImpl.setIdDevice(getIdDevice());
        powerImpl.setIdSensor(getIdSensor());
        powerImpl.setTime(getTime());
        powerImpl.setSensorMode(getSensorMode());
        powerImpl.setLevel(getLevel());

        powerImpl.resetOriginalValues();

        return powerImpl;
    }

    @Override
    public int compareTo(Power power) {
        int value = 0;

        value = DateUtil.compareTo(getTime(), power.getTime());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Power)) {
            return false;
        }

        Power power = (Power) obj;

        PowerPK primaryKey = power.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        PowerModelImpl powerModelImpl = this;

        powerModelImpl._originalIdRace = powerModelImpl._idRace;

        powerModelImpl._setOriginalIdRace = false;

        powerModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Power> toCacheModel() {
        PowerCacheModel powerCacheModel = new PowerCacheModel();

        powerCacheModel.idMeasurement = getIdMeasurement();

        powerCacheModel.idRace = getIdRace();

        powerCacheModel.idDevice = getIdDevice();

        powerCacheModel.idSensor = getIdSensor();

        Date time = getTime();

        if (time != null) {
            powerCacheModel.time = time.getTime();
        } else {
            powerCacheModel.time = Long.MIN_VALUE;
        }

        powerCacheModel.sensorMode = getSensorMode();

        String sensorMode = powerCacheModel.sensorMode;

        if ((sensorMode != null) && (sensorMode.length() == 0)) {
            powerCacheModel.sensorMode = null;
        }

        powerCacheModel.level = getLevel();

        return powerCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(15);

        sb.append("{idMeasurement=");
        sb.append(getIdMeasurement());
        sb.append(", idRace=");
        sb.append(getIdRace());
        sb.append(", idDevice=");
        sb.append(getIdDevice());
        sb.append(", idSensor=");
        sb.append(getIdSensor());
        sb.append(", time=");
        sb.append(getTime());
        sb.append(", sensorMode=");
        sb.append(getSensorMode());
        sb.append(", level=");
        sb.append(getLevel());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(25);

        sb.append("<model><model-name>");
        sb.append("es.eina.tfg.model.Power");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>idMeasurement</column-name><column-value><![CDATA[");
        sb.append(getIdMeasurement());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>idRace</column-name><column-value><![CDATA[");
        sb.append(getIdRace());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>idDevice</column-name><column-value><![CDATA[");
        sb.append(getIdDevice());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>idSensor</column-name><column-value><![CDATA[");
        sb.append(getIdSensor());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>time</column-name><column-value><![CDATA[");
        sb.append(getTime());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sensorMode</column-name><column-value><![CDATA[");
        sb.append(getSensorMode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>level</column-name><column-value><![CDATA[");
        sb.append(getLevel());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
